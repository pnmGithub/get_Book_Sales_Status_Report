<Activity mc:Ignorable="sap sap2010" x:Class="Process" xmlns="http://schemas.microsoft.com/netfx/2009/xaml/activities" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:sap="http://schemas.microsoft.com/netfx/2009/xaml/activities/presentation" xmlns:sap2010="http://schemas.microsoft.com/netfx/2010/xaml/activities/presentation" xmlns:scg="clr-namespace:System.Collections.Generic;assembly=System.Private.CoreLib" xmlns:sd="clr-namespace:System.Data;assembly=System.Data.Common" xmlns:ui="http://schemas.uipath.com/workflow/activities" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <x:Members>
    <x:Property sap2010:Annotation.AnnotationText="Transaction item to be processed." Name="in_TransactionItem" Type="InArgument(x:String)" />
    <x:Property sap2010:Annotation.AnnotationText="Dictionary structure to store configuration data of the process (settings, constants and assets)." Name="in_Config" Type="InArgument(scg:Dictionary(x:String, x:Object))" />
  </x:Members>
  <VisualBasic.Settings>
    <x:Null />
  </VisualBasic.Settings>
  <sap:VirtualizedContainerService.HintSize>797.6,3944</sap:VirtualizedContainerService.HintSize>
  <sap2010:WorkflowViewState.IdRef>ProcessTransaction_1</sap2010:WorkflowViewState.IdRef>
  <TextExpression.NamespacesForImplementation>
    <scg:List x:TypeArguments="x:String" Capacity="50">
      <x:String>Microsoft.VisualBasic</x:String>
      <x:String>Microsoft.VisualBasic.Activities</x:String>
      <x:String>System</x:String>
      <x:String>System.Activities</x:String>
      <x:String>System.Activities.Expressions</x:String>
      <x:String>System.Activities.Statements</x:String>
      <x:String>System.Activities.Validation</x:String>
      <x:String>System.Activities.XamlIntegration</x:String>
      <x:String>System.Collections</x:String>
      <x:String>System.Collections.Generic</x:String>
      <x:String>System.Collections.ObjectModel</x:String>
      <x:String>System.Data</x:String>
      <x:String>System.Diagnostics</x:String>
      <x:String>System.Drawing</x:String>
      <x:String>System.IO</x:String>
      <x:String>System.Linq</x:String>
      <x:String>System.Net.Mail</x:String>
      <x:String>System.Runtime.InteropServices</x:String>
      <x:String>System.Runtime.Serialization</x:String>
      <x:String>System.Windows.Forms</x:String>
      <x:String>System.Windows.Markup</x:String>
      <x:String>System.Xml</x:String>
      <x:String>System.Xml.Linq</x:String>
      <x:String>UiPath.Core</x:String>
      <x:String>UiPath.Core.Activities</x:String>
      <x:String>GlobalVariablesNamespace</x:String>
      <x:String>GlobalConstantsNamespace</x:String>
      <x:String>UiPath.Platform.ResourceHandling</x:String>
      <x:String>System.Reflection</x:String>
      <x:String>UiPath.Excel</x:String>
      <x:String>UiPath.Excel.Activities</x:String>
      <x:String>UiPath.Shared.Activities</x:String>
      <x:String>System.ComponentModel</x:String>
      <x:String>System.Xml.Serialization</x:String>
    </scg:List>
  </TextExpression.NamespacesForImplementation>
  <TextExpression.ReferencesForImplementation>
    <scg:List x:TypeArguments="AssemblyReference" Capacity="80">
      <AssemblyReference>Microsoft.Bcl.AsyncInterfaces</AssemblyReference>
      <AssemblyReference>Microsoft.VisualBasic</AssemblyReference>
      <AssemblyReference>PresentationCore</AssemblyReference>
      <AssemblyReference>PresentationFramework</AssemblyReference>
      <AssemblyReference>System</AssemblyReference>
      <AssemblyReference>System.Activities</AssemblyReference>
      <AssemblyReference>System.Collections</AssemblyReference>
      <AssemblyReference>System.ComponentModel</AssemblyReference>
      <AssemblyReference>System.ComponentModel.Composition</AssemblyReference>
      <AssemblyReference>System.ComponentModel.TypeConverter</AssemblyReference>
      <AssemblyReference>System.Configuration.ConfigurationManager</AssemblyReference>
      <AssemblyReference>System.Console</AssemblyReference>
      <AssemblyReference>System.Core</AssemblyReference>
      <AssemblyReference>System.Data</AssemblyReference>
      <AssemblyReference>System.Data.Common</AssemblyReference>
      <AssemblyReference>System.Drawing</AssemblyReference>
      <AssemblyReference>System.Linq</AssemblyReference>
      <AssemblyReference>System.Memory</AssemblyReference>
      <AssemblyReference>System.ObjectModel</AssemblyReference>
      <AssemblyReference>System.Private.CoreLib</AssemblyReference>
      <AssemblyReference>System.Private.Uri</AssemblyReference>
      <AssemblyReference>System.Runtime.Serialization</AssemblyReference>
      <AssemblyReference>System.Security.Permissions</AssemblyReference>
      <AssemblyReference>System.ServiceModel</AssemblyReference>
      <AssemblyReference>System.ValueTuple</AssemblyReference>
      <AssemblyReference>System.Windows.Forms</AssemblyReference>
      <AssemblyReference>System.Xaml</AssemblyReference>
      <AssemblyReference>System.Xml</AssemblyReference>
      <AssemblyReference>System.Xml.Linq</AssemblyReference>
      <AssemblyReference>UiPath.Excel</AssemblyReference>
      <AssemblyReference>UiPath.OCR.Activities.Design</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities.Design</AssemblyReference>
      <AssemblyReference>UiPath.UiAutomation.Activities</AssemblyReference>
      <AssemblyReference>UiPath.UIAutomationCore</AssemblyReference>
      <AssemblyReference>UiPath.Workflow</AssemblyReference>
      <AssemblyReference>WindowsBase</AssemblyReference>
      <AssemblyReference>NPOI</AssemblyReference>
      <AssemblyReference>UiPath.Excel.Activities.Design</AssemblyReference>
      <AssemblyReference>UiPath.Studio.Constants</AssemblyReference>
      <AssemblyReference>UiPath.Platform</AssemblyReference>
      <AssemblyReference>System.Reflection.DispatchProxy</AssemblyReference>
      <AssemblyReference>System.Reflection.TypeExtensions</AssemblyReference>
      <AssemblyReference>System.Reflection.Metadata</AssemblyReference>
      <AssemblyReference>UiPath.Excel.Activities</AssemblyReference>
      <AssemblyReference>System.IO.FileSystem.Watcher</AssemblyReference>
      <AssemblyReference>System.IO.Packaging</AssemblyReference>
      <AssemblyReference>System.IO.FileSystem.AccessControl</AssemblyReference>
      <AssemblyReference>System.IO.FileSystem.DriveInfo</AssemblyReference>
      <AssemblyReference>UiPath.Testing.Activities</AssemblyReference>
      <AssemblyReference>UiPath.OCR.Activities</AssemblyReference>
      <AssemblyReference>System.Private.ServiceModel</AssemblyReference>
      <AssemblyReference>System.ComponentModel.EventBasedAsync</AssemblyReference>
      <AssemblyReference>Microsoft.Win32.Primitives</AssemblyReference>
      <AssemblyReference>System.ComponentModel.Primitives</AssemblyReference>
      <AssemblyReference>System.Private.Xml</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities.ViewModels</AssemblyReference>
      <AssemblyReference>System.Data.SqlClient</AssemblyReference>
      <AssemblyReference>System.Linq.Expressions</AssemblyReference>
      <AssemblyReference>System.Linq.Parallel</AssemblyReference>
      <AssemblyReference>System.Collections.Immutable</AssemblyReference>
      <AssemblyReference>System.Linq.Queryable</AssemblyReference>
      <AssemblyReference>System.Memory.Data</AssemblyReference>
    </scg:List>
  </TextExpression.ReferencesForImplementation>
  <Sequence sap2010:Annotation.AnnotationText="** 공정별 시트를 Copy해서 처리 **&#xA;* 작업폴더 엑셀파일 별로&#xA;1. 시트별로 반복하면서 &#xA;  - 데이터 없는 시트 삭제&#xA;  - 데이터 있으면 시트 Copy해서 &quot;집행품의&quot; 시트에 쓰기 - VBA &#xA;2. &quot;판매현황&quot; 시트 데이터 집계내어 &quot;월별판매현황&quot; 시트에 쓰기 - dtWriteDataTotal&#xA;3. 결과파일 체크 - 있으면 삭제 후 작업파일 복사, 없으면 작업파일 복사&#xD;&#xA; - 판매현황 데이터 삭제&#xA;4. 결과파일 중분류별 시트 반복하면서 결과파일 &gt; &quot;판매현황&quot; 시트(A)에 쓰기 - VBA&#xA; - 해당 시트 삭제&#xA;5. 결과파일 &quot;월별판매현황&quot; 시트 Copy해서 결과파일 &gt; &quot;판매현황&quot; 시트(K)에 쓰기 - VBA&#xA; - 해당 시트 삭제" DisplayName="Process" sap:VirtualizedContainerService.HintSize="784.8,3879.2" sap2010:WorkflowViewState.IdRef="Sequence_1">
    <Sequence.Variables>
      <Variable x:TypeArguments="x:Boolean" Name="isWorkFileExists" />
      <Variable x:TypeArguments="ui:WorkbookApplication" Name="wsWorkbook" />
      <Variable x:TypeArguments="scg:List(x:String)" Name="liSheets" />
      <Variable x:TypeArguments="sd:DataTable" Name="dtWriteData" />
      <Variable x:TypeArguments="sd:DataTable" Name="dtWriteDataTotal" />
    </Sequence.Variables>
    <sap:WorkflowViewStateService.ViewState>
      <scg:Dictionary x:TypeArguments="x:String, x:Object">
        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
        <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
      </scg:Dictionary>
    </sap:WorkflowViewStateService.ViewState>
    <ui:LogMessage DisplayName="Log Message Process Start" sap:VirtualizedContainerService.HintSize="722.4,142.4" sap2010:WorkflowViewState.IdRef="LogMessage_1" Level="Info" Message="[&quot;Started Process&quot;]" />
    <ui:Comment DisplayName="Comment (placeholder)" sap:VirtualizedContainerService.HintSize="722.4,56" sap2010:WorkflowViewState.IdRef="Comment_1" Text="//  Invoke steps of the process" />
    <ui:PathExists Resource="{x:Null}" DisplayName="작업파일 체크 - Path Exists" Exists="[isWorkFileExists]" sap:VirtualizedContainerService.HintSize="722.4,116" sap2010:WorkflowViewState.IdRef="PathExists_1" Path="[path.Combine(in_TransactionItem)]" PathType="File" />
    <If Condition="[isWorkFileExists]" DisplayName="작업파일 있으면 - If" sap:VirtualizedContainerService.HintSize="722.4,3128.8" sap2010:WorkflowViewState.IdRef="If_1">
      <If.Then>
        <Sequence sap:VirtualizedContainerService.HintSize="688.8,2945.6" sap2010:WorkflowViewState.IdRef="Sequence_2">
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
          <ui:ExcelApplicationScope Password="{x:Null}" AutoSave="False" CreateNewFile="False" DisplayName="작업 엑셀 파일 - Excel Application Scope" sap:VirtualizedContainerService.HintSize="645.6,696.8" sap2010:WorkflowViewState.IdRef="ExcelApplicationScope_1" InstanceCachePeriod="3000" Workbook="[wsWorkbook]" WorkbookPath="[path.Combine(in_TransactionItem)]">
            <ui:ExcelApplicationScope.Body>
              <ActivityAction x:TypeArguments="ui:WorkbookApplication">
                <ActivityAction.Argument>
                  <DelegateInArgument x:TypeArguments="ui:WorkbookApplication" Name="ExcelWorkbookScope" />
                </ActivityAction.Argument>
                <Sequence DisplayName="Do" sap:VirtualizedContainerService.HintSize="512,587.2" sap2010:WorkflowViewState.IdRef="Sequence_4">
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                  <Sequence sap2010:Annotation.AnnotationText="중분류별 시트 반복하면서&#xA;- 데이터 없는 시트 삭제&#xA;- 데이터 있는 시트 복사해서 &quot;판매현황&quot; 시트에 쓰기" DisplayName="작업폴더 &gt; &quot;판매현황&quot; 시트 쓰기 - Sequence" sap:VirtualizedContainerService.HintSize="449.6,143.2" sap2010:WorkflowViewState.IdRef="Sequence_8">
                    <Sequence.Variables>
                      <Variable x:TypeArguments="x:Int32" Name="intSheetIdx" />
                    </Sequence.Variables>
                    <sap:WorkflowViewStateService.ViewState>
                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                        <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                        <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                        <x:Boolean x:Key="IsPinned">False</x:Boolean>
                      </scg:Dictionary>
                    </sap:WorkflowViewStateService.ViewState>
                    <ui:ExcelGetWorkbookSheets DisplayName="시트 리스트 - Get Workbook Sheets" sap:VirtualizedContainerService.HintSize="487.2,24.8" sap2010:WorkflowViewState.IdRef="ExcelGetWorkbookSheets_1" Sheets="[liSheets]" />
                    <ui:ForEach x:TypeArguments="x:String" CurrentIndex="[intSheetIdx]" DisplayName="For Each in liSheets" sap:VirtualizedContainerService.HintSize="487.2,682.4" sap2010:WorkflowViewState.IdRef="ForEach`1_1" Values="[liSheets]">
                      <ui:ForEach.Body>
                        <ActivityAction x:TypeArguments="x:String">
                          <ActivityAction.Argument>
                            <DelegateInArgument x:TypeArguments="x:String" Name="sheetName" />
                          </ActivityAction.Argument>
                          <Sequence DisplayName="Body" sap:VirtualizedContainerService.HintSize="453.6,494.4" sap2010:WorkflowViewState.IdRef="Sequence_7">
                            <sap:WorkflowViewStateService.ViewState>
                              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                              </scg:Dictionary>
                            </sap:WorkflowViewStateService.ViewState>
                            <If Condition="[intSheetIdx &lt; liSheets.count-2]" DisplayName="마지막 판매현황, 월별판매현황 시트 제외 - If" sap:VirtualizedContainerService.HintSize="410.4,404.8" sap2010:WorkflowViewState.IdRef="If_2">
                              <sap:WorkflowViewStateService.ViewState>
                                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                  <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                                </scg:Dictionary>
                              </sap:WorkflowViewStateService.ViewState>
                              <If.Then>
                                <Sequence sap:VirtualizedContainerService.HintSize="376.8,221.6" sap2010:WorkflowViewState.IdRef="Sequence_5">
                                  <sap:WorkflowViewStateService.ViewState>
                                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                      <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                    </scg:Dictionary>
                                  </sap:WorkflowViewStateService.ViewState>
                                  <ui:InvokeVBA OutputValue="{x:Null}" sap2010:Annotation.AnnotationText="{}{복사할시트명, 붙여넣을시트명, 합계포함여부, 붙여넣을파일경로, 붙여넣을cell}" CodeFilePath="[path.Combine(in_Config(&quot;strExcelVBAFile&quot;).ToString)]" DisplayName="중분류별시트 복사해서 &quot;판매현황&quot; 쓰기 - Invoke VBA" EntryMethodName="copySheetData" EntryMethodParameters="[{sheetName, &quot;판매현황&quot;, &quot;N&quot;, &quot;&quot;, &quot;A&quot;}]" sap:VirtualizedContainerService.HintSize="333.6,132" sap2010:WorkflowViewState.IdRef="InvokeVBA_1">
                                    <sap:WorkflowViewStateService.ViewState>
                                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                        <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                                      </scg:Dictionary>
                                    </sap:WorkflowViewStateService.ViewState>
                                  </ui:InvokeVBA>
                                </Sequence>
                              </If.Then>
                              <If.Else>
                                <Sequence sap2010:WorkflowViewState.IdRef="Sequence_6" />
                              </If.Else>
                            </If>
                          </Sequence>
                        </ActivityAction>
                      </ui:ForEach.Body>
                      <sap:WorkflowViewStateService.ViewState>
                        <scg:Dictionary x:TypeArguments="x:String, x:Object">
                          <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                          <x:Boolean x:Key="IsPinned">False</x:Boolean>
                        </scg:Dictionary>
                      </sap:WorkflowViewStateService.ViewState>
                    </ui:ForEach>
                  </Sequence>
                  <Sequence sap2010:Annotation.AnnotationText="&quot;판매현황&quot; 시트 데이터 읽어서 (dtWriteData) 전달&#xA;&quot;월별판매현황&quot; 시트에 쓸 데이터 반환(dtWriteDataTotal)" DisplayName="작업파일 &gt; &quot;월별판매현황&quot; 시트 쓰기 - Sequence" sap:VirtualizedContainerService.HintSize="449.6,127.2" sap2010:WorkflowViewState.IdRef="Sequence_9">
                    <sap:WorkflowViewStateService.ViewState>
                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                        <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                        <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                        <x:Boolean x:Key="IsPinned">False</x:Boolean>
                      </scg:Dictionary>
                    </sap:WorkflowViewStateService.ViewState>
                    <ui:ExcelReadRange AddHeaders="True" DataTable="[dtWriteData]" DisplayName="&quot;판매현황&quot; 시트 데이터 읽기 - Read Range" sap:VirtualizedContainerService.HintSize="387.2,60" sap2010:WorkflowViewState.IdRef="ExcelReadRange_1" Range="A:H" SheetName="판매현황" />
                    <ui:FilterDataTable DataTable="[dtWriteData]" DisplayName="빈 row 삭제하기 - Filter Data Table" FilterRowsMode="Remove" sap:VirtualizedContainerService.HintSize="387.2,162.4" sap2010:WorkflowViewState.IdRef="FilterDataTable_1" OutputDataTable="[dtWriteData]" SelectColumnsMode="Remove">
                      <ui:FilterDataTable.Filters>
                        <scg:List x:TypeArguments="ui:FilterOperationArgument" Capacity="4">
                          <ui:FilterOperationArgument Operand="{x:Null}" BooleanOperator="And" Operator="EMPTY">
                            <ui:FilterOperationArgument.Column>
                              <InArgument x:TypeArguments="x:String">["대분류"]</InArgument>
                            </ui:FilterOperationArgument.Column>
                          </ui:FilterOperationArgument>
                        </scg:List>
                      </ui:FilterDataTable.Filters>
                      <ui:FilterDataTable.SelectColumns>
                        <scg:List x:TypeArguments="InArgument" Capacity="4">
                          <x:Null />
                        </scg:List>
                      </ui:FilterDataTable.SelectColumns>
                    </ui:FilterDataTable>
                    <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="GetWorkExcelFileWriteSheet.xaml - Invoke Workflow File" sap:VirtualizedContainerService.HintSize="387.2,113.6" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_1" UnSafe="False" WorkflowFileName="Bizwork\GetWorkExcelFileWriteSheet.xaml">
                      <ui:InvokeWorkflowFile.Arguments>
                        <InArgument x:TypeArguments="x:String" x:Key="in_TransactionItem">[in_TransactionItem]</InArgument>
                        <InArgument x:TypeArguments="scg:Dictionary(x:String, x:Object)" x:Key="in_Config">[in_Config]</InArgument>
                        <OutArgument x:TypeArguments="sd:DataTable" x:Key="out_dtWriteDataTotal">[dtWriteDataTotal]</OutArgument>
                        <InArgument x:TypeArguments="sd:DataTable" x:Key="in_dtWriteData">[dtWriteData]</InArgument>
                      </ui:InvokeWorkflowFile.Arguments>
                    </ui:InvokeWorkflowFile>
                    <ui:ExcelWriteRange AddHeaders="True" DataTable="[dtWriteDataTotal]" DisplayName="&quot;월별판매현황&quot; 시트에 데이터 쓰기 - Write Range" sap:VirtualizedContainerService.HintSize="387.2,88" sap2010:WorkflowViewState.IdRef="ExcelWriteRange_1" SheetName="월별판매현황" StartingCell="A1" />
                  </Sequence>
                  <ui:ExcelSaveWorkbook DisplayName="엑셀파일 저장 - Save Workbook" sap:VirtualizedContainerService.HintSize="449.6,24.8" sap2010:WorkflowViewState.IdRef="ExcelSaveWorkbook_1" />
                  <ui:ExcelCloseWorkbook DisplayName="엑셀파일 닫기 - Close Workbook" sap:VirtualizedContainerService.HintSize="449.6,60" sap2010:WorkflowViewState.IdRef="ExcelCloseWorkbook_1" Workbook="[wsWorkbook]" />
                </Sequence>
              </ActivityAction>
            </ui:ExcelApplicationScope.Body>
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                <x:Boolean x:Key="IsPinned">False</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
          </ui:ExcelApplicationScope>
          <Sequence sap2010:Annotation.AnnotationText="결과파일 있으면 삭제 후 작업 파일 복사, 없으면 작업 파일 복사" DisplayName="결과파일 &gt; 파일체크 - Sequence" sap:VirtualizedContainerService.HintSize="645.6,114.4" sap2010:WorkflowViewState.IdRef="Sequence_10">
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                <x:Boolean x:Key="IsPinned">False</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
            <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" sap2010:Annotation.AnnotationText="우선 기존 파일 있으면 삭제하고 시작" DisplayName="결과파일 삭제 - Bizwork\CreateFolderFile.xaml" sap:VirtualizedContainerService.HintSize="387.2,144.8" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_2" UnSafe="False" WorkflowFileName="Bizwork\CreateFolderFile.xaml">
              <ui:InvokeWorkflowFile.Arguments>
                <InArgument x:TypeArguments="x:String" x:Key="in_strPathType">File</InArgument>
                <InArgument x:TypeArguments="x:String" x:Key="in_strFullPath">[path.Combine(in_Config("strResultFolderPath").ToString, in_TransactionItem.Split("\"C).Last)]</InArgument>
              </ui:InvokeWorkflowFile.Arguments>
              <sap:WorkflowViewStateService.ViewState>
                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                  <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                </scg:Dictionary>
              </sap:WorkflowViewStateService.ViewState>
            </ui:InvokeWorkflowFile>
            <ui:CopyFile ContinueOnError="{x:Null}" Destination="[path.Combine(in_Config(&quot;strResultFolderPath&quot;).ToString, in_TransactionItem.Split(&quot;\&quot;C).Last)]" DisplayName="작업파일 복사 - Copy File" sap:VirtualizedContainerService.HintSize="387.2,155.2" sap2010:WorkflowViewState.IdRef="CopyFile_1" Path="[path.Combine(in_TransactionItem)]" />
          </Sequence>
          <Sequence sap2010:Annotation.AnnotationText="결과파일의 중분류별 시트 복사해서 판매현황 &gt; A에 쓰기&#xA;결과파일의 월별판매현황 시트 복사해서 판매현황 &gt; K에 쓰기" DisplayName="결과파일 &gt; &quot;판매현황&quot; 쓰기 - Sequence" sap:VirtualizedContainerService.HintSize="645.6,1964.8" sap2010:WorkflowViewState.IdRef="Sequence_17">
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                <x:Boolean x:Key="IsPinned">False</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
            <ui:ExcelApplicationScope Password="{x:Null}" AutoSave="False" CreateNewFile="False" DisplayName="결과 엑셀 파일 - Excel Application Scope" sap:VirtualizedContainerService.HintSize="583.2,1808.8" sap2010:WorkflowViewState.IdRef="ExcelApplicationScope_4" InstanceCachePeriod="3000" Workbook="[wsWorkbook]" WorkbookPath="[path.Combine(in_Config(&quot;strResultFolderPath&quot;).ToString, in_TransactionItem.Split(&quot;\&quot;C).Last)]">
              <ui:ExcelApplicationScope.Body>
                <ActivityAction x:TypeArguments="ui:WorkbookApplication">
                  <ActivityAction.Argument>
                    <DelegateInArgument x:TypeArguments="ui:WorkbookApplication" Name="ExcelWorkbookScope" />
                  </ActivityAction.Argument>
                  <Sequence DisplayName="Do" sap:VirtualizedContainerService.HintSize="549.6,1699.2" sap2010:WorkflowViewState.IdRef="Sequence_13">
                    <Sequence.Variables>
                      <Variable x:TypeArguments="x:Int32" Name="intSheetIdx" />
                    </Sequence.Variables>
                    <sap:WorkflowViewStateService.ViewState>
                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                      </scg:Dictionary>
                    </sap:WorkflowViewStateService.ViewState>
                    <ui:ExcelGetWorkbookSheets DisplayName="시트리스트 가져오기 - Get Workbook Sheets" sap:VirtualizedContainerService.HintSize="487.2,24.8" sap2010:WorkflowViewState.IdRef="ExcelGetWorkbookSheets_2" Sheets="[liSheets]" />
                    <ui:InvokeVBA OutputValue="{x:Null}" sap2010:Annotation.AnnotationText="{}{시트명}" CodeFilePath="[path.Combine(in_Config(&quot;strExcelVBAFile&quot;).ToString)]" DisplayName="판매현황 시트 1행 남기고 삭제 - Invoke VBA" EntryMethodName="deleteRowinSheet" EntryMethodParameters="[{&quot;판매현황&quot;}]" sap:VirtualizedContainerService.HintSize="487.2,119.2" sap2010:WorkflowViewState.IdRef="InvokeVBA_7">
                      <sap:WorkflowViewStateService.ViewState>
                        <scg:Dictionary x:TypeArguments="x:String, x:Object">
                          <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                        </scg:Dictionary>
                      </sap:WorkflowViewStateService.ViewState>
                    </ui:InvokeVBA>
                    <ui:ForEach x:TypeArguments="x:String" CurrentIndex="[intSheetIdx]" DisplayName="For Each in liSheets for Result" sap:VirtualizedContainerService.HintSize="487.2,854.4" sap2010:WorkflowViewState.IdRef="ForEach`1_3" Values="[liSheets]">
                      <ui:ForEach.Body>
                        <ActivityAction x:TypeArguments="x:String">
                          <ActivityAction.Argument>
                            <DelegateInArgument x:TypeArguments="x:String" Name="sheetName" />
                          </ActivityAction.Argument>
                          <Sequence DisplayName="Body" sap:VirtualizedContainerService.HintSize="453.6,666.4" sap2010:WorkflowViewState.IdRef="Sequence_20">
                            <sap:WorkflowViewStateService.ViewState>
                              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                              </scg:Dictionary>
                            </sap:WorkflowViewStateService.ViewState>
                            <If Condition="[intSheetIdx &lt; liSheets.count-2]" DisplayName="마지막 집행품의, total 시트 제외 - If" sap:VirtualizedContainerService.HintSize="410.4,576.8" sap2010:WorkflowViewState.IdRef="If_4">
                              <sap:WorkflowViewStateService.ViewState>
                                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                  <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                                </scg:Dictionary>
                              </sap:WorkflowViewStateService.ViewState>
                              <If.Then>
                                <Sequence sap:VirtualizedContainerService.HintSize="376.8,393.6" sap2010:WorkflowViewState.IdRef="Sequence_18">
                                  <sap:WorkflowViewStateService.ViewState>
                                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                      <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                    </scg:Dictionary>
                                  </sap:WorkflowViewStateService.ViewState>
                                  <ui:InvokeVBA OutputValue="{x:Null}" sap2010:Annotation.AnnotationText="{}{복사할시트명, 붙여넣을시트명, 합계포함여부, 붙여넣을파일경로, 붙여넣을cell}" CodeFilePath="[path.Combine(in_Config(&quot;strExcelVBAFile&quot;).ToString)]" DisplayName="중분류별시트 복사해서 결과 &gt; &quot;판매현황&quot; 쓰기 - Invoke VBA" EntryMethodName="copySheetData" EntryMethodParameters="[{sheetName, &quot;판매현황&quot;, &quot;Y&quot;, &quot;&quot;, &quot;A&quot;}]" sap:VirtualizedContainerService.HintSize="333.6,132" sap2010:WorkflowViewState.IdRef="InvokeVBA_4">
                                    <sap:WorkflowViewStateService.ViewState>
                                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                        <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                                      </scg:Dictionary>
                                    </sap:WorkflowViewStateService.ViewState>
                                  </ui:InvokeVBA>
                                  <ui:InvokeVBA OutputValue="{x:Null}" sap2010:Annotation.AnnotationText="{}{복사할시트명, 붙여넣을시트명, 합계포함여부, 붙여넣을파일경로, 붙여넣을cell}" CodeFilePath="[path.Combine(in_Config(&quot;strExcelVBAFile&quot;).ToString)]" DisplayName="판매현황 쓴 후 시트삭제 - Invoke VBA" EntryMethodName="deleteSheet" EntryMethodParameters="[{sheetName}]" sap:VirtualizedContainerService.HintSize="333.6,132" sap2010:WorkflowViewState.IdRef="InvokeVBA_5">
                                    <sap:WorkflowViewStateService.ViewState>
                                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                        <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                                      </scg:Dictionary>
                                    </sap:WorkflowViewStateService.ViewState>
                                  </ui:InvokeVBA>
                                </Sequence>
                              </If.Then>
                              <If.Else>
                                <Sequence sap2010:WorkflowViewState.IdRef="Sequence_19" />
                              </If.Else>
                            </If>
                          </Sequence>
                        </ActivityAction>
                      </ui:ForEach.Body>
                      <sap:WorkflowViewStateService.ViewState>
                        <scg:Dictionary x:TypeArguments="x:String, x:Object">
                          <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                          <x:Boolean x:Key="IsPinned">False</x:Boolean>
                        </scg:Dictionary>
                      </sap:WorkflowViewStateService.ViewState>
                    </ui:ForEach>
                    <ui:InvokeVBA OutputValue="{x:Null}" sap2010:Annotation.AnnotationText="{}{복사할시트명, 붙여넣을시트명, 합계포함여부, 붙여넣을파일경로, 붙여넣을cell}" CodeFilePath="[path.Combine(in_Config(&quot;strExcelVBAFile&quot;).ToString)]" DisplayName="월별판매현황시트 복사해서 결과 &gt; &quot;판매현황&quot; 쓰기 - Invoke VBA" EntryMethodName="copySheetData" EntryMethodParameters="[{&quot;월별판매현황&quot;, &quot;판매현황&quot;, &quot;Y&quot;, &quot;&quot;, &quot;K&quot;}]" sap:VirtualizedContainerService.HintSize="487.2,132" sap2010:WorkflowViewState.IdRef="InvokeVBA_3">
                      <sap:WorkflowViewStateService.ViewState>
                        <scg:Dictionary x:TypeArguments="x:String, x:Object">
                          <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                        </scg:Dictionary>
                      </sap:WorkflowViewStateService.ViewState>
                    </ui:InvokeVBA>
                    <ui:InvokeVBA OutputValue="{x:Null}" sap2010:Annotation.AnnotationText="{}{복사할시트명, 붙여넣을시트명, 합계포함여부, 붙여넣을파일경로, 붙여넣을cell}" CodeFilePath="[path.Combine(in_Config(&quot;strExcelVBAFile&quot;).ToString)]" DisplayName="판매현황 쓴 후 시트삭제 - Invoke VBA" EntryMethodName="deleteSheet" EntryMethodParameters="[{&quot;월별판매현황&quot;}]" sap:VirtualizedContainerService.HintSize="487.2,132" sap2010:WorkflowViewState.IdRef="InvokeVBA_6">
                      <sap:WorkflowViewStateService.ViewState>
                        <scg:Dictionary x:TypeArguments="x:String, x:Object">
                          <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                        </scg:Dictionary>
                      </sap:WorkflowViewStateService.ViewState>
                    </ui:InvokeVBA>
                    <ui:ExcelSaveWorkbook DisplayName="엑셀파일 저장 - Save Workbook" sap:VirtualizedContainerService.HintSize="487.2,24.8" sap2010:WorkflowViewState.IdRef="ExcelSaveWorkbook_3" />
                    <ui:ExcelCloseWorkbook DisplayName="엑셀파일 닫기 - Close Workbook" sap:VirtualizedContainerService.HintSize="487.2,60" sap2010:WorkflowViewState.IdRef="ExcelCloseWorkbook_3" Workbook="[wsWorkbook]" />
                  </Sequence>
                </ActivityAction>
              </ui:ExcelApplicationScope.Body>
              <sap:WorkflowViewStateService.ViewState>
                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                  <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                  <x:Boolean x:Key="IsPinned">False</x:Boolean>
                </scg:Dictionary>
              </sap:WorkflowViewStateService.ViewState>
            </ui:ExcelApplicationScope>
          </Sequence>
        </Sequence>
      </If.Then>
      <If.Else>
        <Sequence sap2010:WorkflowViewState.IdRef="Sequence_3" />
      </If.Else>
    </If>
  </Sequence>
</Activity>